안녕하세요. 발표를 맡게된 김한규 인턴이라고 합니다. 반갑습니다.

발표는 프로젝트 개요, 기술 개요, 최종 성과순으로 진행되겠습니다.

먼저 프로젝트 개요입니다.

저희는 LIMO를 통해 자율주행을 구현하는 것을 목표로하여 프로젝트를 진행하였습니다.
참여 인원은 김민경, 김한규, 김한빛, 신수민 총 4명입니다. 9일이라는 기간이 걸렸고 LIMO 플랫폼을 사용하였습니다.

이번 프로젝트는 크게 3가지의 단계로 구성되었습니다. 전처리, 차선검출, 그리고 제어 순서로 진행이 되었습니다. 전처리에서는 이미지를 받아들이고 차선검출을 더 깔끔하게 하기 위해 opencv와 numpy 라이브러리에 대한 이해도가 필요하였습니다. 차선 검출에서는 ~~~. 마지막으로 제어 부분에서는 앞서 진행하였던 과정들을 종합하여 python, ROS를 활용하는 능력이 중요하였습니다.

다음은 어떠한 기술들을 사용하였는지 말씀드리겠습니다. 자율주행의 머리 부분에 해당하는 이미지 전처리 부분입니다. 자동차 앞에 달려있는 카메라는 원근법에 의해 차선이 갈수록 좁아지는 형태로 이미지를 인식합니다. 여기에서 perspective transform은 관점을 변환하여 위에서 바라보는 것처럼 이미지를 만들어 줍니다. 이렇게 되면 제어를 할 때 더욱 간편해지고 정밀하게 다룰 수 있습니다. 하지만 코드를 작성하는 과정에서 카메라의 딜레이를 발생시켜 코드에 사용하진 않았습니다.

그레이 스케일은 검은 도로 위에서 하얀 차선을 검출하는 방법입니다. 기준점을 정하고 밝기가 일정 수준의 이상일 경우 완전히 흰색으로 인식하고, 일정 수준 이하일 경우 검은색으로 변환합니다. 시도하였으나 빛 반사로 인한 노이즈에 매우 취약한 것을 확인하고 다른 방법을 모색하였습니다.

그 모색한 방법은 바로 HSV입니다. HSV 필터는 색상, 채도 그리고 명도에 따라 색을 나타낼 수 있습니다. 저희는 빛 반사의 문제 때문에 흰색 차선이 아닌 노란색 차선을 검출하기로 하였습니다. 때문에 원색에 가까운 노란색만을 검출하기 위해서 HSV 필터를 사용하는 것은 차선을 인식하는데 좋은 방법이 되었습니다. 트랙바를 조정하여 노란색이 최대한 잘 검출되는 값을 찾아 고정합니다. 실제 중앙선이 1차선 왼쪽에 있는것을 따와 왼쪽읜 차선을 인식할 예정입니다.

HSV 필터로 아무리 잘 노란색만 검출하더라도 횡단보도와 신호등과 같이 방해할 수 있는 요소가 정말 많습니다. ROI를 사용하여 필요하지 않는 부분은 과감히 인식하지 않도록 지워버렸습니다. 앞에 보시는 것과 같이 ROI를 적용한 이미지에서는 희미하게 나오는 흰색부분을 지운 것을 확인할 수 있습니다.

(11)여기서부터 차선을 검출을 합니다. Hough Transform은 경계선을 찾아 선을 인식하는 방법입니다. 곡선은 검출이 불가능하다는 단점과 수평선도 검출하는 등 여러 취약점들이 있어 사용하지 않았습니다.

(12)
 대신 Sliding Window 방식을 사용하였는데요. 이 방식을 적용하면 차선이 있는 좌표에 값을 쌓아 올려 histogram표로 나타냅니다. 이것으로 선을 검출한 뒤 부분별로 window를 적용하여 창에 보이는 값들을 각각 기울기 값으로 반환합니다. 아래 사진이 바로 기울기들을 나타내는 값이고 이 기울기의 평균값들을 사용하여 제어를 하였습니다.

(13)
  다음은 최종 성과물입니다.

(14)
영상을 보여드리기 전에, 이 창은 커맨드를 입력하는 터미널 창이고 이 화면은 리모 상에서 보여지는 화면입니다. 그리고 이 창은 HSV필터가 적용된 모습입니다. 자세한 설명은 영상을 시청한 뒤에 설명드리겠습니다.
(~~~영상 시청~~~) 

(15)
먼저 왼쪽의 사진을 보시면 카메라와 리모의 제어값을 받아서 limo를 이동시키기 위해 터미널 창에서 각각의 파일을 실행시킵니다. 이후 저희가 작성한 코드를 실행하면 사용이 가능해 집니다. 오른쪽 사진을 확인하시면 perspective transform을 사용하지 않았음을 확인 할 수 있습니다. 딜레이가 거의 없어 실시간으로 연산이 가능하기 때문에 사진을 잘라서 가까운 값들만 처리하도록 하였습니다. 눈앞의 이미지만을 추출하여 기울기, 무게 중심점을 찾아서 제어를 하는 방식으로 설계 하였습니다.

(16)

 
